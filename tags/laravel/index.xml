<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Laravel on Catatsu Tech Blog</title>
    <link>https://catatsu.github.io/tags/laravel/</link>
    <description>Recent content in Laravel on Catatsu Tech Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Code released under the Apache 2.0 license.</copyright>
    <lastBuildDate>Mon, 03 Oct 2016 20:51:42 +0900</lastBuildDate>
    <atom:link href="https://catatsu.github.io/tags/laravel/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>PHP界隈で一番ナウい（けど遅い）という噂のLaravelをサクッと触ってなんとなく理解する</title>
      <link>https://catatsu.github.io/2016/10/03/hello-laravel</link>
      <pubDate>Mon, 03 Oct 2016 20:51:42 +0900</pubDate>
      
      <guid>https://catatsu.github.io/2016/10/03/hello-laravel</guid>
      <description>

&lt;p&gt;どうも僕(&lt;a href=&#34;https://github.com/nabeen&#34;&gt;@nabeen&lt;/a&gt;)です。&lt;/p&gt;

&lt;p&gt;RubyにはRailsというRubyのフレームワークといえばコレ！みたいなものがあるんですが、残念ながらPHP界隈にはRailsに該当するようなフレームワークはありません。&lt;/p&gt;

&lt;p&gt;そんな中、個人的に一番ナウいと思っているPHPフレームワークLaravelに触れるべく、サンプルアプリを通してその使いやすさを実感してみようと思います！&lt;/p&gt;

&lt;h2 id=&#34;開発環境構築&#34;&gt;開発環境構築&lt;/h2&gt;

&lt;p&gt;ナウいフレームワークだけあって、Laravelは&lt;code&gt;composer&lt;/code&gt;で入れる、また、&lt;code&gt;vagrant&lt;/code&gt;も標準で準備されています。最高！最高！ふぅうううーーーーーー！！&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ composer require laravel/homestead
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ php vendor/bin/homestead make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここまでやれば&lt;code&gt;vagrant up&lt;/code&gt;までたどり着きます。マジかよ楽かよ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vagrant up
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vagrant ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとはアプリをサクッと作るぜ！&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ composer create-project laravel/laravel --prefer-dist laravel-apps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とここまで来て気づいたんですが、プロジェクト配下でアプリを作ってしまったので階層がちょっと気持ち悪い感じになってしまいました。&lt;/p&gt;

&lt;p&gt;のでちょっと変えて、こんな感じに。&lt;code&gt;vagrant&lt;/code&gt;関連はvagrant配下に押しやっています。ちょっとスッキリ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ tree -L 1 ./
./
├── app
├── artisan
├── bootstrap
├── composer.json
├── composer.lock
├── config
├── database
├── gulpfile.js
├── package.json
├── phpunit.xml
├── public
├── readme.md
├── resources
├── routes
├── server.php
├── storage
├── tests
├── vagrant
└── vendor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとはブラウザから&lt;code&gt;http://192.168.10.10/&lt;/code&gt;を叩けば、デフォルトページが出ていますね！ね？え？出るよね？&lt;/p&gt;

&lt;h2 id=&#34;チュートリアル&#34;&gt;チュートリアル&lt;/h2&gt;

&lt;p&gt;公式にはチュートリアル的なものがなかったので、&lt;a href=&#34;http://qiita.com/fumiyasac@github/items/78a335880f7abb1de8bf&#34;&gt;こちら&lt;/a&gt;のチュートリアル的なのを参考に、Laravelっていきます。&lt;/p&gt;

&lt;p&gt;やることはリンク先にある通りなので爆、ポイントをかいつまんで説明します。&lt;/p&gt;

&lt;p&gt;マイグレーションファイルを作るコマンドは以下。中身は完全Skeletonなので、自分でガリガリ書いていきましょう。書くべし書くべし！&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ php artisan make:migration create_topics_table
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;マイグレーションの適用もちゃんとコマンドで。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ php artisan migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;戻したければロールバックもできる。ロールバックは、「前回適用したもの」がロールバックされるようだ（※一気に幾つかマイグレーションしたら一気にいくつかロールバックされる）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ php artisan migrate:rollback
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;モデルもジェネレータで生成できる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ php artisan make:model Topic
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ときたら当然コントローラーもジェネレータで生成できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ php artisan make:controller TopicsController
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でもこれ、ホント単一ファイル(テストもないしViewもない)しか生成してくれないので、そんなに使い勝手は良くないかも。。コレくらいだったら&lt;code&gt;cp&lt;/code&gt;でコピーしちゃった方がいいかもしんない。&lt;/p&gt;

&lt;p&gt;まぁそれは置いといて、&lt;code&gt;rails c&lt;/code&gt;的なあれもあります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ php artisan tinker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ルーティングは前のバージョンとは変わっていて、&lt;code&gt;routes/web.php&lt;/code&gt;で定義されてるっぽい。設定されているルーティングを見るにはこのコマンド。&lt;code&gt;resource&lt;/code&gt;でRESTfulなURIも生成できる！Railsライクですね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ php artisan route:list
+--------+----------+--------------------+------+----------------------------------------------+--------------+
| Domain | Method   | URI                | Name | Action                                       | Middleware   |
+--------+----------+--------------------+------+----------------------------------------------+--------------+
|        | GET|HEAD | /                  |      | App\Http\Controllers\TopicsController@index  | web          |
|        | GET|HEAD | api/user           |      | Closure                                      | api,auth:api |
|        | GET|HEAD | topics/add         |      | App\Http\Controllers\TopicsController@add    | web          |
|        | POST     | topics/create      |      | App\Http\Controllers\TopicsController@create | web          |
|        | POST     | topics/delete      |      | App\Http\Controllers\TopicsController@delete | web          |
|        | GET|HEAD | topics/edit/{id}   |      | App\Http\Controllers\TopicsController@edit   | web          |
|        | POST     | topics/update/{id} |      | App\Http\Controllers\TopicsController@update | web          |
|        | GET|HEAD | topics/{id}        |      | App\Http\Controllers\TopicsController@show   | web          |
+--------+----------+--------------------+------+----------------------------------------------+--------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とまぁこんな感じで←え、なんとなくざっくり理解できました。&lt;/p&gt;

&lt;p&gt;ここまでのソースは&lt;a href=&#34;https://github.com/nabeen/laravel_apps/tree/hello-laravel&#34;&gt;Github&lt;/a&gt;にあげているので、ご自由にどうぞ。&lt;/p&gt;

&lt;h2 id=&#34;ちょっと気に食わないところ&#34;&gt;ちょっと気に食わないところ&lt;/h2&gt;

&lt;p&gt;箇条書きでいきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ControllerがHttp配下にあるのが慣れない&lt;/li&gt;
&lt;li&gt;ModelがApp直下にあるのはどうなの？&lt;/li&gt;
&lt;li&gt;ルーティングファイルの名前が&lt;code&gt;web.php&lt;/code&gt;だと？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まだ殆どLaravelのメリットは感じられていませんが、とりあえず慣れ親しんだ感じのフォルダ構成から結構逸脱してるなぁという印象。まぁこういうのは慣れだし、そこまで障害にはならないんですが（自分好みの定義にも変えられるんだろうけど、なるべくデフォルトから逸脱したくはない）。&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;なんか全然Laravelの機能が把握できなかった気がするけど、触りとしてはこんなもんでいいですかね？&lt;/p&gt;

&lt;p&gt;次回はソーシャルログイン辺りを実装していきます。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>